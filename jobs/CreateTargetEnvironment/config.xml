<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>The Target Environment job is used to create a new AWS Cloudformation stack that is ready to accept a new Application Deployment. This job is run as part of &#xd;
the &lt;b&gt;&lt;a href=&quot;/jenkins/view/DeliveryPipeline/&quot;&gt;DeliveryPipeline&lt;/a&gt;&lt;/b&gt;</description>
  <keepDependencies>false</keepDependencies>
  <scm class="hudson.plugins.git.GitSCM">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <name></name>
        <refspec></refspec>
        <url>git@github.com:stelligent/havoc_compute_platform.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <disableSubmodules>false</disableSubmodules>
    <recursiveSubmodules>false</recursiveSubmodules>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <authorOrCommitter>false</authorOrCommitter>
    <clean>false</clean>
    <wipeOutWorkspace>false</wipeOutWorkspace>
    <pruneBranches>false</pruneBranches>
    <remotePoll>false</remotePoll>
    <ignoreNotifyCommit>false</ignoreNotifyCommit>
    <useShallowClone>false</useShallowClone>
    <buildChooser class="hudson.plugins.git.util.DefaultBuildChooser"/>
    <gitTool>Default</gitTool>
    <submoduleCfg class="list"/>
    <relativeTargetDir></relativeTargetDir>
    <reference></reference>
    <excludedRegions></excludedRegions>
    <excludedUsers></excludedUsers>
    <gitConfigName></gitConfigName>
    <gitConfigEmail></gitConfigEmail>
    <skipTag>false</skipTag>
    <includedRegions></includedRegions>
    <scmName></scmName>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers class="vector"/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>if [ $deployToProduction == true ]
then
 SSH_KEY=production
 ApplicationName=${STACK_NAME}
 STAGE=production
else
 SSH_KEY=development
 ApplicationName=${STACK_NAME}
 STAGE=development
fi

# Set Development Database properties
DBUSER=transient
DBPASSWORD=transient
DBNAME=eops

ruby ${WORKSPACE}/lib/set_properties.rb --itemname ${STACK_NAME} \
                                        --property DBUSER \
                                        --value ${DBUSER}

ruby ${WORKSPACE}/lib/set_properties.rb --itemname ${STACK_NAME} \
                                        --property DBPASSWORD \
                                        --value ${DBPASSWORD}

ruby ${WORKSPACE}/lib/set_properties.rb --itemname ${STACK_NAME} \
                                        --property DBNAME \
                                        --value ${DBNAME}

# Get AMI ID
LATEST_AMI=`ruby ${WORKSPACE}/lib/showback_domain.rb --item ami \
                                                 --key latest`
# Get Domain Name
Domain=`ruby ${WORKSPACE}/lib/showback_domain.rb --item properties \
                                                 --key Domain`
# Get CFN Group ID
Group=`ruby ${WORKSPACE}/lib/showback_domain.rb --item properties \
                                                 --key GROUP`
# Get S3 Bucket
S3Bucket=`ruby ${WORKSPACE}/lib/showback_domain.rb --item properties \
                                                   --key S3Bucket`
# Get Security Group ID
SecurityGroupId=`ruby ${WORKSPACE}/lib/showback_domain.rb --item properties \
                                                          --key SGID`
# Get Security Group Owner ID
SecurityGroupOwnerId=`ruby ${WORKSPACE}/lib/showback_domain.rb --item properties \
                                                   --key SGIDOwner`

# Create Cloudformaton Stack
ruby ${WORKSPACE}/lib/create_stack.rb --stackname ${STACK_NAME} \
                                      --group ${Group} \
                                      --domain ${Domain} \
                                      --scriptedorami AMI \
                                      --ami ${LATEST_AMI} \
                                      --templatelocation ${WORKSPACE}/infrastructure/target/production.template \
                                      --application ${ApplicationName} \
                                      --sshkey ${SSH_KEY} \
                                      --s3bucket ${S3Bucket} \
                                      --securitygroup ${SecurityGroupId} \
                                      --snstopic ${SNS_TOPIC}

# Load SimpleDB Domain with Key/Value Pairs for Application Stack
ruby ${WORKSPACE}/lib/load_domain.rb --filename ${STACK_NAME} \
                                     --itemname ${STACK_NAME}

# Create development Database
ruby ${WORKSPACE}/lib/create_database.rb --stackname ${STACK_NAME}-DATABASE \
                                         --templatelocation ${WORKSPACE}/infrastructure/target/database.template \
                                         --securityGroupOwner ${SecurityGroupOwnerId} \
                                         --securityGroup ${SecurityGroupId} \
                                         --dbName ${DBNAME} \
                                         --dbUser ${DBUSER} \
                                         --dbPassword ${DBPASSWORD}

# Load SimpleDB Domain with Key/Value Pairs for Database
ruby ${WORKSPACE}/lib/load_domain.rb --filename ${STACK_NAME}-DATABASE \
                                     --itemname ${STACK_NAME}

# Get Application Stack Instance IP Address
Host=`ruby ${WORKSPACE}/lib/showback_domain.rb --item ${STACK_NAME} \
                                               --key InstanceIPAddress`

# Get database Endpoint
Endpoint=`ruby ${WORKSPACE}/lib/showback_domain.rb --item ${STACK_NAME} \
                                               --key DatabaseEndpoint`

# Run Acceptance Tests
cucumber ${WORKSPACE}/infrastructure/target/features/production.feature host=${Host} user=ec2-user key=/usr/share/tomcat6/.ssh/id_rsa

# Publish notifications to SNS
sns-publish --topic-arn $SNS_TOPIC \
            --subject &quot;New Environment Ready&quot; \
            --message &quot;Your new environment is ready. IP Address: $Host. An example command to ssh into the box would be: ssh -i development.pem ec2-user@$Host This instance was created by $JENKINS_DOMAIN

CloudFormation Stack Name: ${STACK_NAME}
Route53 Domain: ${Domain}
Application: ${ApplicationName}
Full Domain: ${ApplicationName}.${Domain}
Database Endpoint: ${Endpoint}
Database Username: ${DBUSER}
Database Password: ${DBPASSWORD}&quot; --aws-credential-file /usr/share/tomcat6/aws_access</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.parameterizedtrigger.BuildTrigger>
      <configs>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.CurrentBuildParameters/>
          </configs>
          <projects>DeployApplication, </projects>
          <condition>SUCCESS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.BuildTrigger>
  </publishers>
  <buildWrappers/>
</project>
